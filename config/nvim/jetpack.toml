[[plugins]]
repo = 'tani/vim-jetpack'
opt = true

### Appearance ###
[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_event = 'BufEnter'
hook_source = '''
lua << EOF
require('colorizer').setup()
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
on_event = 'VimEnter'
hook_post_source = '''
lua << EOF
require'nvim-treesitter.configs'.setup {
    parser_install_dir = vim.fn.stdpath('data') .. '/treesitter',
    auto_install = true,
    highlight = { enable = true, },
    indent = { enable = true, },
  }
vim.opt.runtimepath:append(vim.fn.stdpath('data') .. '/treesitter')
EOF
'''

[[plugins]]
repo = 'sainnhe/sonokai'
on_post_source = 'nvim-treesitter'
hook_post_source = '''
let g:sonokai_transparent_background    = 1
let g:sonokai_menu_selection_background = 'red'
let g:sonokai_better_performance        = 1
colorscheme sonokai
'''

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
on_post_source = 'nvim-treesitter'
hook_post_source = '''
lua << EOF
vim.cmd("highlight IndentBlanklineContextStart guifg=#56B6C2 gui=nocombine")
require('indent_blankline').setup {
  show_current_context = true,
  show_current_context_start = true,
}
EOF
'''

### Extra Writing ###
[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = 'InsertEnter'
hook_source = '''
lua << EOF
require('nvim-autopairs').setup()
EOF
'''

[[plugins]]
repo = 'shinespark/vim-list2tree'
on_cmd = 'List2Tree'

[[plugins]]
repo = 'mattn/vim-maketable'
on_cmd = 'MakeTable'

[[plugins]]
repo = 'inotom/str2htmlentity'
on_cmd = [ "Str2HtmlEntity", "Entity2HtmlString" ]

### Search ###
[[plugins]]
repo = 'mhinz/vim-grepper'
on_map = '<plug>(Grepper'
on_cmd = 'Grepper'
hook_add = '''
nmap gs <ESC>:tabnew<CR>:Grepper<CR>
xmap gs <ESC>:tabnew<CR><plug>(GrepperOperator)

let g:grepper           = {}
let g:grepper.tools     = ['pt', 'git', 'grep']
let g:grepper.next_tool = 'gs'
'''

[[plugins]]
repo = 'tyru/open-browser.vim'
on_map = '<Plug>(openbrowser'
hook_add = '''
nmap gw <Plug>(openbrowser-smart-search)
vmap gw <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'rhysd/devdocs.vim'
depends = 'open-browser.vim'
on_map = '<Plug>(devdocs-under-cursor)'
hook_add = '''
nmap K <Plug>(devdocs-under-cursor)
'''

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger)'
hook_add = '''
nmap <Leader>gm <Plug>(git-messenger)
'''

### Filetype Specific Functions ###
[[plugins]]
repo = 'Shougo/context_filetype.vim'
opt = 1

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_event = 'CursorMoved'
depends = 'context_filetype.vim'

[[plugins]]
repo = 'previm/previm'
on_ft = ['markdown', 'rst', 'mkd', 'md']
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'
hook_add = '''
let g:previm_open_cmd = 'open -a Safari'
let g:previm_enable_realtime = 1
'''

[[plugins]]
repo = 'thinca/vim-quickrun'
on_cmd = ['QuickRun']
# ファイルタイプ毎に実行結果をブラウザ等に表示するには:help quickrun-module-outputter
hook_source = '''
let g:quickrun_config   = get(g:,'quickrun_config',{})
let g:quickrun_config._ = {
      \ 'runner':'job',
      \ 'outputter/buffer/split':':botright',
      \ 'outputter/buffer/close_on_empty':1,
      \ }
let g:quickrun_config.typescript = {
      \ 'command':'tsc',
      \ 'cmdopt':'--locale ja',
      \ }
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
'''

# 今度試してみたいもの
# autosave
# toggle comments
# generate Document comment
# Debugger
# https://github.com/adoy/vim-php-refactoring-toolbox
# https://github.com/vim-php/vim-php-refactoring
# https://github.com/bling/vim-bufferline
# https://github.com/othree/yajs.vim
# https://github.com/dsawardekar/wordpress.vim
# https://github.com/hotwatermorning/auto-git-diff
# https://github.com/gennaro-tedesco/nvim-peekup
