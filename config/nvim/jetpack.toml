[[plugins]]
repo = 'tani/vim-jetpack'
on_event = 'CmdlineEnter'

[[plugins]]
repo = 'nvim-lua/plenary.nvim'
opt = true

### Appearance ###
[[plugins]]
repo = 'akinsho/bufferline.nvim'
tag = 'v4.1.0'
on_event = 'VimEnter'
hook_post_source = "lua require('bufferline').setup()"

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter'
tag = 'v0.9.0'
on_event = 'VimEnter'
hook_post_source = '''
lua << EOF
require'nvim-treesitter.configs'.setup {
    parser_install_dir = vim.fn.stdpath('data') .. '/treesitter',
    auto_install = true,
    highlight = { enable = true, },
    indent = { enable = true, },
  }
vim.opt.runtimepath:append(vim.fn.stdpath('data') .. '/treesitter')
EOF
'''

[[plugins]]
repo = 'sainnhe/sonokai'
tag = 'v0.3.3'
on_post_source = 'nvim-treesitter'
hook_post_source = '''
let g:sonokai_transparent_background    = 1
let g:sonokai_menu_selection_background = 'red'
let g:sonokai_better_performance        = 1
colorscheme sonokai
'''

[[plugins]]
repo = 'norcalli/nvim-colorizer.lua'
on_post_source = 'nvim-treesitter'
hook_post_source = "lua require('colorizer').setup()"

[[plugins]]
repo = 'lukas-reineke/indent-blankline.nvim'
tag = 'v2.20.4'
on_post_source = 'nvim-treesitter'
hook_post_source = '''
lua << EOF
vim.cmd("highlight IndentBlanklineContextStart guifg=#56B6C2 gui=nocombine")
require('indent_blankline').setup {
  show_current_context = true,
  show_current_context_start = true,
}
EOF
'''

[[plugins]]
repo = 'nvim-treesitter/nvim-treesitter-context'
on_event = 'CursorMoved'
depends = 'nvim-treesitter'

### Extra Writing ###
[[plugins]]
repo = 'windwp/nvim-autopairs'
on_event = 'InsertEnter'
hook_post_source = "lua require('nvim-autopairs').setup()"

[[plugins]]
repo = 'shinespark/vim-list2tree'
on_cmd = 'List2Tree'

[[plugins]]
repo = 'mattn/vim-maketable'
on_cmd = 'MakeTable'

[[plugins]]
repo = 'inotom/str2htmlentity'
on_cmd = [ "Str2HtmlEntity", "Entity2HtmlString" ]

### Search ###
[[plugins]]
repo = 'nvim-telescope/telescope.nvim'
depends = 'plenary.nvim'
tag = '0.1.1'
on_cmd = 'Telescope'
hook_add = 'nmap <Leader>f <Cmd>Telescope<CR>'

[[plugins]]
repo = 'tyru/open-browser.vim'
tag = 'v0.1.2'
on_map = '<Plug>(openbrowser'
hook_add = '''
nmap gw <Plug>(openbrowser-smart-search)
vmap gw <Plug>(openbrowser-smart-search)
'''

[[plugins]]
repo = 'rhysd/devdocs.vim'
depends = 'open-browser.vim'
on_cmd = ['DevDocs', 'DevDocsUnderCursor', 'DevDocsALL', 'DevDocsALLUnderCursor']

[[plugins]]
repo = 'rhysd/git-messenger.vim'
on_cmd = 'GitMessenger'
on_map = '<Plug>(git-messenger)'
hook_add = '''
nmap <Leader>gm <Plug>(git-messenger)
'''

### Filetype Specific Functions ###
[[plugins]]
repo = 'Shougo/context_filetype.vim'
opt = true

[[plugins]]
repo = 'osyo-manga/vim-precious'
on_event = 'CursorMoved'
depends = 'context_filetype.vim'

[[plugins]]
repo = 'previm/previm'
tag = '1.8.1'
on_ft = ['markdown', 'rst', 'mkd', 'md']
on_cmd = 'PrevimOpen'
depends = 'open-browser.vim'

## Language Server Protocol ##
[[plugins]]
repo = 'neovim/nvim-lspconfig'
tag = 'v0.1.6'
opt = true
hook_post_source = """
lua << EOF
local lsp = require('lspconfig')
-- lsp.pyright.setup({})
-- lsp.tsserver.setup({})
EOF
"""

[[plugins]]
repo = "hrsh7th/nvim-cmp"
on_event = 'CursorMoved'
hook_post_source = """
lua << EOF
local cmp = require("cmp")
local has_words_before = function()
  unpack = unpack or table.unpack
  local line, col = unpack(vim.api.nvim_win_get_cursor(0))
  return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match('%s') == nil
end

cmp.setup({
  sources = {
    { name = "path" },
    { name = "buffer" },
    { name = "cmdline" },
    { name = 'look', keyword_length = 2,
      option = { convert_case = true, loud = true }
    },
  },
  mapping = cmp.mapping.preset.insert({
    ['<Tab>'] = function(fallback)
      if not cmp.select_next_item() then
        if vim.bo.buftype ~= 'prompt' and has_words_before() then
          cmp.complete()
        else
          fallback()
        end
      end
    end,
    ['<S-Tab>'] = function(fallback)
      if not cmp.select_prev_item() then
        if vim.bo.buftype ~= 'prompt' and has_words_before() then
          cmp.complete()
        else
          fallback()
        end
      end
    end,
   ["<CR>"] = cmp.mapping({
     i = function(fallback)
       if cmp.visible() and cmp.get_active_entry() then
         cmp.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = false })
       else
         fallback()
       end
     end,
     s = cmp.mapping.confirm({ select = true }),
     c = cmp.mapping.confirm({ behavior = cmp.ConfirmBehavior.Replace, select = true }),
   }),
  }),
})
EOF
"""

[[plugins]]
repo = "hrsh7th/cmp-path"
on_post_source = 'nvim-cmp'

[[plugins]]
repo = "hrsh7th/cmp-buffer"
on_post_source = 'nvim-cmp'

[[plugins]]
repo = "hrsh7th/cmp-cmdline"
on_post_source = 'nvim-cmp'

[[plugins]]
repo = 'octaltree/cmp-look'
on_post_source = 'nvim-cmp'

# [[plugins]]
# repo = "hrsh7th/cmp-nvim-lsp"
# on_post_source = 'nvim-cmp'

# [[plugins]]
# repo = 'Maan2003/lsp_lines.nvim'
# on_event = 'BufEnter'
# hook_source = "lua require('lsp_lines').setup()"

# TODO: 今度試してみたい
# autosave
# toggle comments
# generate Document comment
# Debugger
# https://github.com/adoy/vim-php-refactoring-toolbox
# https://github.com/vim-php/vim-php-refactoring
# https://github.com/bling/vim-bufferline
# https://github.com/othree/yajs.vim
# https://github.com/dsawardekar/wordpress.vim
# https://github.com/hotwatermorning/auto-git-diff
# https://github.com/lukas-reineke/cmp-rg
# https://github.com/aduros/ai.vim
# https://github.com/mattn/vim-findroot
# https://github.com/nvim-treesitter/nvim-treesitter-textobjects
# https://daisuzu.hatenablog.com/entry/2020/12/03/003629  ## Quickfix
# https://zenn.dev/tmrekk/articles/4380961a754287  ## Quickfix
# https://github.com/ray-x/navigator.lua
# https://github.com/mfussenegger/nvim-dap
